#include "test.h"
#include "shoc/cipher/aes.h"

namespace shoc {
namespace {

template<class E>
void check(span_i<E::key_size> key, span_i<E::block_size> msg, span_i<E::block_size> exp)
{
    byte out[E::block_size] = {};

    E cipher {key};

    cipher.encrypt(msg, out);
    compare(out, exp);
    cipher.decrypt(out, out);
    compare(out, msg);
}

}

TEST(Cipher, Aes128)
{
    static_assert(aes128::key_size == 16);
    static_assert(aes128::block_size == 16);
    static_assert(aes128::state_size == 16);

    const byte msg[16]  = { 0x00, 0x11, 0x22, 0x33, 0x44, 0x55, 0x66, 0x77, 0x88, 0x99, 0xaa, 0xbb, 0xcc, 0xdd, 0xee, 0xff };
    const byte exp[16]  = { 0x69, 0xc4, 0xe0, 0xd8, 0x6a, 0x7b, 0x04, 0x30, 0xd8, 0xcd, 0xb7, 0x80, 0x70, 0xb4, 0xc5, 0x5a };
    const byte key[16]  = { 0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f };

    check<aes128>(key, msg, exp);
}

TEST(Cipher, Aes192)
{
    static_assert(aes192::key_size == 24);
    static_assert(aes192::block_size == 16);
    static_assert(aes192::state_size == 16);

    const byte msg[16]  = { 0x00, 0x11, 0x22, 0x33, 0x44, 0x55, 0x66, 0x77, 0x88, 0x99, 0xaa, 0xbb, 0xcc, 0xdd, 0xee, 0xff };
    const byte exp[16]  = { 0xdd, 0xa9, 0x7c, 0xa4, 0x86, 0x4c, 0xdf, 0xe0, 0x6e, 0xaf, 0x70, 0xa0, 0xec, 0x0d, 0x71, 0x91 };
    const byte key[24]  = { 0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f, 
                            0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17 };

    check<aes192>(key, msg, exp);
}

TEST(Cipher, Aes256)
{
    static_assert(aes256::key_size == 32);
    static_assert(aes256::block_size == 16);
    static_assert(aes256::state_size == 16);

    const byte msg[16]  = { 0x00, 0x11, 0x22, 0x33, 0x44, 0x55, 0x66, 0x77, 0x88, 0x99, 0xaa, 0xbb, 0xcc, 0xdd, 0xee, 0xff };
    const byte exp[16]  = { 0x8e, 0xa2, 0xb7, 0xca, 0x51, 0x67, 0x45, 0xbf, 0xea, 0xfc, 0x49, 0x90, 0x4b, 0x49, 0x60, 0x89 };
    const byte key[32]  = { 0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f, 
                            0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18, 0x19, 0x1a, 0x1b, 0x1c, 0x1d, 0x1e, 0x1f };

    check<aes256>(key, msg, exp);
}

TEST(Cipher, AesConstexpr)
{
    constexpr const byte msg[16]  = { 0x00, 0x11, 0x22, 0x33, 0x44, 0x55, 0x66, 0x77, 0x88, 0x99, 0xaa, 0xbb, 0xcc, 0xdd, 0xee, 0xff };
    constexpr const byte exp[16]  = { 0x8e, 0xa2, 0xb7, 0xca, 0x51, 0x67, 0x45, 0xbf, 0xea, 0xfc, 0x49, 0x90, 0x4b, 0x49, 0x60, 0x89 };
    constexpr const byte key[32]  = { 0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f, 
                                      0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18, 0x19, 0x1a, 0x1b, 0x1c, 0x1d, 0x1e, 0x1f };
    constexpr auto out = [&] {
        std::array<byte, aes256::block_size> enc = {};
        std::array<byte, aes256::block_size> dec = {};
        aes256 cipher {key};
        cipher.encrypt(msg, enc);
        cipher.decrypt(enc, dec);
        return std::pair{enc, dec};
    }();
    compare(out.first, exp);
    compare(out.second, msg);
}

}